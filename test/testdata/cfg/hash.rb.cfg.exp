digraph "hash.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(TestHash) = alias <C TestHash>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(TestHash))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::TestHash#something" {
    label = "::TestHash#something";
    color = blue;
    "bb::TestHash#something_0" [shape = invhouse];
    "bb::TestHash#something_1" [shape = parallelogram];

    "bb::TestHash#something_0" [
        label = "block[id=0]()\l<self>: TestHash = cast(<self>: NilClass, TestHash);\l<returnMethodTemp>$2: Integer(17) = 17\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(17)\l<unconditional>\l"
    ];

    "bb::TestHash#something_0" -> "bb::TestHash#something_1" [style="bold"];
    "bb::TestHash#something_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#something_1" -> "bb::TestHash#something_1" [style="bold"];
}

subgraph "cluster_::TestHash#test" {
    label = "::TestHash#test";
    color = blue;
    "bb::TestHash#test_0" [shape = invhouse];
    "bb::TestHash#test_1" [shape = parallelogram];

    "bb::TestHash#test_0" [
        label = "block[id=0]()\l<self>: TestHash = cast(<self>: NilClass, TestHash);\l<hashTemp>$3: T.untyped = <self>: TestHash.something()\l<hashTemp>$4: Symbol(:\"bar\") = :\"bar\"\l<statTemp>$8: Integer(1) = 1\l<statTemp>$9: Integer(2) = 2\l<hashTemp>$6: Integer = <statTemp>$8: Integer(1).+(<statTemp>$9: Integer(2))\l<hashTemp>$7: Integer(2) = 2\l<magic>$10: T.class_of(<Magic>) = alias <C <Magic>>\l<returnMethodTemp>$2: T::Hash[T.untyped, T.untyped] = <magic>$10: T.class_of(<Magic>).<build-hash>(<hashTemp>$3: T.untyped, <hashTemp>$4: Symbol(:\"bar\"), <hashTemp>$6: Integer, <hashTemp>$7: Integer(2))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Hash[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::TestHash#test_0" -> "bb::TestHash#test_1" [style="bold"];
    "bb::TestHash#test_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_1" -> "bb::TestHash#test_1" [style="bold"];
}

subgraph "cluster_::TestHash#test_shaped" {
    label = "::TestHash#test_shaped";
    color = blue;
    "bb::TestHash#test_shaped_0" [shape = invhouse];
    "bb::TestHash#test_shaped_1" [shape = parallelogram];

    "bb::TestHash#test_shaped_0" [
        label = "block[id=0]()\l<self>: TestHash = cast(<self>: NilClass, TestHash);\l<hashTemp>$3: Integer(1) = 1\l<hashTemp>$4: Integer(2) = 2\l<hashTemp>$5: Integer(2) = 2\l<hashTemp>$6: Integer(3) = 3\l<hashTemp>$7: Symbol(:\"foo\") = :\"foo\"\l<hashTemp>$8: Symbol(:\"bar\") = :\"bar\"\l<hashTemp>$9: Symbol(:\"baz\") = :\"baz\"\l<hashTemp>$10: T.untyped = <self>: TestHash.something()\l<magic>$12: T.class_of(<Magic>) = alias <C <Magic>>\l<returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:\"bar\"), baz: T.untyped} = <magic>$12: T.class_of(<Magic>).<build-hash>(<hashTemp>$3: Integer(1), <hashTemp>$4: Integer(2), <hashTemp>$5: Integer(2), <hashTemp>$6: Integer(3), <hashTemp>$7: Symbol(:\"foo\"), <hashTemp>$8: Symbol(:\"bar\"), <hashTemp>$9: Symbol(:\"baz\"), <hashTemp>$10: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:\"bar\"), baz: T.untyped}\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_0" -> "bb::TestHash#test_shaped_1" [style="bold"];
    "bb::TestHash#test_shaped_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_1" -> "bb::TestHash#test_shaped_1" [style="bold"];
}

}

