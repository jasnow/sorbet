begin
  <emptyTree>
  class <emptyTree><<C <root>>> < ()
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::Test)
        <emptyTree>
      end
    end
  end
  class ::Test<<C Test>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def foo(x, <blk>)
      begin
        if ::T.unsafe(false)
          T.let(nil, String)
        else
          <emptyTree>
        end
        x
      end
    end

    def bar(y, <blk>)
      begin
        if ::T.unsafe(false)
          T.let(nil, String)
        else
          <emptyTree>
        end
        y
      end
    end

    def qux(z, <blk>)
      begin
        if ::T.unsafe(false)
          T.let("", String)
        else
          <emptyTree>
        end
        z
      end
    end

    def baz(w, <blk>)
      begin
        if ::T.unsafe(false)
          T.let("", String)
        else
          <emptyTree>
        end
        w
      end
    end

    def self.<static-init>(<blk>)
      begin
        <self>.sig() do ||
          <self>.params({:"x" => ::String}).returns(::String)
        end
        <self>.sig() do ||
          <self>.params({:"y" => ::String}).returns(::String)
        end
        <self>.sig() do ||
          <self>.params({:"z" => ::String}).returns(::String)
        end
        <self>.sig() do ||
          <self>.params({:"w" => ::String}).returns(::String)
        end
        ::Sorbet::Private::Static.keep_for_ide(::T::Sig)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
