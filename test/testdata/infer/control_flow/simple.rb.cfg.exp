digraph "simple.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(ControlFlow))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: Integer = load_arg(a)\la: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5 = 0\l<returnMethodTemp>$2 = return <returnTemp>$5\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\lb: T::Boolean = a: T.nilable(Integer).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\l<statTemp>$6: T.class_of(Integer) = alias <C Integer>\l<statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<statTemp>$6: T.class_of(Integer))\lb: T::Boolean = <statTemp>$4: T::Boolean.!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3, rubyBlockId=0]()\la: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: Integer = a\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))\l<ifTemp>$3: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$7: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<statTemp>$4: NilClass = a\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4, rubyBlockId=0](<statTemp>$4: T.nilable(T::Boolean))\lb: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$10: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: Integer = a\l<ifTemp>$3: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5, rubyBlockId=0](a: T.nilable(Integer))\l<returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6 = 0\l<returnMethodTemp>$2 = return <returnTemp>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::<Class:ControlFlow>#<static-init>" {
    label = "::<Class:ControlFlow>#<static-init>";
    color = blue;
    "bb::<Class:ControlFlow>#<static-init>_0" [shape = invhouse];
    "bb::<Class:ControlFlow>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:ControlFlow>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(ControlFlow) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U ControlFlow>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ControlFlow>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(T::Sig) = alias <C Sig>\lkeep_for_ide$6: T.class_of(T) = alias <C T>\l<statTemp>$3: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<statTemp>$5: T.class_of(T::Sig))\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$10: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_0" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_1" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$10: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_5" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_3" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$10: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\l<statTemp>$7: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$10\l<block-pre-call-temp>$27: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$28: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_3" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$10: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$17: Symbol(:\"a\") = :\"a\"\l<statTemp>$19: T.class_of(T) = alias <C T>\l<statTemp>$20: T.class_of(Integer) = alias <C Integer>\l<statTemp>$21: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$18: <Type: T.nilable(Integer)> = <statTemp>$19: T.class_of(T).any(<statTemp>$20: T.class_of(Integer), <statTemp>$21: T.class_of(NilClass))\l<magic>$22: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$16: {a: <Type: T.nilable(Integer)>} = <magic>$22: T.class_of(<Magic>).<build-hash>(<hashTemp>$17: Symbol(:\"a\"), <hashTemp>$18: <Type: T.nilable(Integer)>)\l<statTemp>$14: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$16: {a: <Type: T.nilable(Integer)>})\l<statTemp>$23: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <statTemp>$14: T::Private::Methods::DeclBuilder.returns(<statTemp>$23: T.class_of(Integer))\l<blockReturnTemp>$24: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_5" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$28: T.class_of(ControlFlow), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_9" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_7" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<selfRestore>$28: T.class_of(ControlFlow), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\l<statTemp>$25: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$27, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$28\l<block-pre-call-temp>$42: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$43: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_7" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$28: T.class_of(ControlFlow), <block-pre-call-temp>$27: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$35: Symbol(:\"a\") = :\"a\"\l<hashTemp>$36: T.class_of(Integer) = alias <C Integer>\l<magic>$37: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$34: {a: T.class_of(Integer)} = <magic>$37: T.class_of(<Magic>).<build-hash>(<hashTemp>$35: Symbol(:\"a\"), <hashTemp>$36: T.class_of(Integer))\l<statTemp>$32: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$34: {a: T.class_of(Integer)})\l<statTemp>$38: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$31: T::Private::Methods::DeclBuilder = <statTemp>$32: T::Private::Methods::DeclBuilder.returns(<statTemp>$38: T.class_of(Integer))\l<blockReturnTemp>$39: T.noreturn = blockreturn<sig> <blockReturnTemp>$31: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_9" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$43: T.class_of(ControlFlow), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_13" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_11" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<selfRestore>$43: T.class_of(ControlFlow), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\l<statTemp>$40: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$42, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$43\l<block-pre-call-temp>$60: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$61: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_11" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$43: T.class_of(ControlFlow), <block-pre-call-temp>$42: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$50: Symbol(:\"a\") = :\"a\"\l<statTemp>$52: T.class_of(T) = alias <C T>\l<statTemp>$53: T.class_of(Integer) = alias <C Integer>\l<statTemp>$54: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$51: <Type: T.nilable(Integer)> = <statTemp>$52: T.class_of(T).any(<statTemp>$53: T.class_of(Integer), <statTemp>$54: T.class_of(NilClass))\l<magic>$55: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$49: {a: <Type: T.nilable(Integer)>} = <magic>$55: T.class_of(<Magic>).<build-hash>(<hashTemp>$50: Symbol(:\"a\"), <hashTemp>$51: <Type: T.nilable(Integer)>)\l<statTemp>$47: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$49: {a: <Type: T.nilable(Integer)>})\l<statTemp>$56: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$46: T::Private::Methods::DeclBuilder = <statTemp>$47: T::Private::Methods::DeclBuilder.returns(<statTemp>$56: T.class_of(Integer))\l<blockReturnTemp>$57: T.noreturn = blockreturn<sig> <blockReturnTemp>$46: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_13" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$61: T.class_of(ControlFlow), <block-pre-call-temp>$60: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_17" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_15" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<selfRestore>$61: T.class_of(ControlFlow), <block-pre-call-temp>$60: Sorbet::Private::Static::Void)\l<statTemp>$58: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$60, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$61\l<block-pre-call-temp>$78: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$79: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_15" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$61: T.class_of(ControlFlow), <block-pre-call-temp>$60: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$68: Symbol(:\"a\") = :\"a\"\l<statTemp>$70: T.class_of(T) = alias <C T>\l<statTemp>$71: T.class_of(Integer) = alias <C Integer>\l<statTemp>$72: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$69: <Type: T.nilable(Integer)> = <statTemp>$70: T.class_of(T).any(<statTemp>$71: T.class_of(Integer), <statTemp>$72: T.class_of(NilClass))\l<magic>$73: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$67: {a: <Type: T.nilable(Integer)>} = <magic>$73: T.class_of(<Magic>).<build-hash>(<hashTemp>$68: Symbol(:\"a\"), <hashTemp>$69: <Type: T.nilable(Integer)>)\l<statTemp>$65: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$67: {a: <Type: T.nilable(Integer)>})\l<statTemp>$74: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$64: T::Private::Methods::DeclBuilder = <statTemp>$65: T::Private::Methods::DeclBuilder.returns(<statTemp>$74: T.class_of(Integer))\l<blockReturnTemp>$75: T.noreturn = blockreturn<sig> <blockReturnTemp>$64: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_17" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$79: T.class_of(ControlFlow), <block-pre-call-temp>$78: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_21" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_19" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<selfRestore>$79: T.class_of(ControlFlow), <block-pre-call-temp>$78: Sorbet::Private::Static::Void)\l<statTemp>$76: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$78, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$79\l<block-pre-call-temp>$96: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$97: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_19" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$79: T.class_of(ControlFlow), <block-pre-call-temp>$78: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$86: Symbol(:\"a\") = :\"a\"\l<statTemp>$88: T.class_of(T) = alias <C T>\l<statTemp>$89: T.class_of(Integer) = alias <C Integer>\l<statTemp>$90: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$87: <Type: T.nilable(Integer)> = <statTemp>$88: T.class_of(T).any(<statTemp>$89: T.class_of(Integer), <statTemp>$90: T.class_of(NilClass))\l<magic>$91: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$85: {a: <Type: T.nilable(Integer)>} = <magic>$91: T.class_of(<Magic>).<build-hash>(<hashTemp>$86: Symbol(:\"a\"), <hashTemp>$87: <Type: T.nilable(Integer)>)\l<statTemp>$83: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$85: {a: <Type: T.nilable(Integer)>})\l<statTemp>$92: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$82: T::Private::Methods::DeclBuilder = <statTemp>$83: T::Private::Methods::DeclBuilder.returns(<statTemp>$92: T.class_of(Integer))\l<blockReturnTemp>$93: T.noreturn = blockreturn<sig> <blockReturnTemp>$82: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_21" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" [
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$97: T.class_of(ControlFlow), <block-pre-call-temp>$96: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_25" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_23" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_23" [
        label = "block[id=23, rubyBlockId=0](<selfRestore>$97: T.class_of(ControlFlow), <block-pre-call-temp>$96: Sorbet::Private::Static::Void)\l<statTemp>$94: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$96, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$97\l<block-pre-call-temp>$114: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$115: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_23" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_25" [
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$97: T.class_of(ControlFlow), <block-pre-call-temp>$96: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$104: Symbol(:\"a\") = :\"a\"\l<statTemp>$106: T.class_of(T) = alias <C T>\l<statTemp>$107: T.class_of(Integer) = alias <C Integer>\l<statTemp>$108: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$105: <Type: T.nilable(Integer)> = <statTemp>$106: T.class_of(T).any(<statTemp>$107: T.class_of(Integer), <statTemp>$108: T.class_of(NilClass))\l<magic>$109: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$103: {a: <Type: T.nilable(Integer)>} = <magic>$109: T.class_of(<Magic>).<build-hash>(<hashTemp>$104: Symbol(:\"a\"), <hashTemp>$105: <Type: T.nilable(Integer)>)\l<statTemp>$101: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$103: {a: <Type: T.nilable(Integer)>})\l<statTemp>$110: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$100: T::Private::Methods::DeclBuilder = <statTemp>$101: T::Private::Methods::DeclBuilder.returns(<statTemp>$110: T.class_of(Integer))\l<blockReturnTemp>$111: T.noreturn = blockreturn<sig> <blockReturnTemp>$100: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_25" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" [
        label = "block[id=26, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$115: T.class_of(ControlFlow), <block-pre-call-temp>$114: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_29" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_27" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_27" [
        label = "block[id=27, rubyBlockId=0](<selfRestore>$115: T.class_of(ControlFlow), <block-pre-call-temp>$114: Sorbet::Private::Static::Void)\l<statTemp>$112: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$114, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$115\l<block-pre-call-temp>$132: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$133: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_27" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_29" [
        label = "block[id=29, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$115: T.class_of(ControlFlow), <block-pre-call-temp>$114: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$122: Symbol(:\"a\") = :\"a\"\l<statTemp>$124: T.class_of(T) = alias <C T>\l<statTemp>$125: T.class_of(Integer) = alias <C Integer>\l<statTemp>$126: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$123: <Type: T.nilable(Integer)> = <statTemp>$124: T.class_of(T).any(<statTemp>$125: T.class_of(Integer), <statTemp>$126: T.class_of(NilClass))\l<magic>$127: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$121: {a: <Type: T.nilable(Integer)>} = <magic>$127: T.class_of(<Magic>).<build-hash>(<hashTemp>$122: Symbol(:\"a\"), <hashTemp>$123: <Type: T.nilable(Integer)>)\l<statTemp>$119: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$121: {a: <Type: T.nilable(Integer)>})\l<statTemp>$128: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$118: T::Private::Methods::DeclBuilder = <statTemp>$119: T::Private::Methods::DeclBuilder.returns(<statTemp>$128: T.class_of(Integer))\l<blockReturnTemp>$129: T.noreturn = blockreturn<sig> <blockReturnTemp>$118: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_29" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" [
        label = "block[id=30, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$133: T.class_of(ControlFlow), <block-pre-call-temp>$132: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_33" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_31" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_31" [
        label = "block[id=31, rubyBlockId=0](<selfRestore>$133: T.class_of(ControlFlow), <block-pre-call-temp>$132: Sorbet::Private::Static::Void)\l<statTemp>$130: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$132, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$133\l<block-pre-call-temp>$150: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()\l<selfRestore>$151: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_31" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_33" [
        label = "block[id=33, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$133: T.class_of(ControlFlow), <block-pre-call-temp>$132: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$140: Symbol(:\"a\") = :\"a\"\l<statTemp>$142: T.class_of(T) = alias <C T>\l<statTemp>$143: T.class_of(Integer) = alias <C Integer>\l<statTemp>$144: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$141: <Type: T.nilable(Integer)> = <statTemp>$142: T.class_of(T).any(<statTemp>$143: T.class_of(Integer), <statTemp>$144: T.class_of(NilClass))\l<magic>$145: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$139: {a: <Type: T.nilable(Integer)>} = <magic>$145: T.class_of(<Magic>).<build-hash>(<hashTemp>$140: Symbol(:\"a\"), <hashTemp>$141: <Type: T.nilable(Integer)>)\l<statTemp>$137: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$139: {a: <Type: T.nilable(Integer)>})\l<statTemp>$146: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$136: T::Private::Methods::DeclBuilder = <statTemp>$137: T::Private::Methods::DeclBuilder.returns(<statTemp>$146: T.class_of(Integer))\l<blockReturnTemp>$147: T.noreturn = blockreturn<sig> <blockReturnTemp>$136: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_33" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" [
        label = "block[id=34, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$151: T.class_of(ControlFlow), <block-pre-call-temp>$150: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_37" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_35" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_35" [
        label = "block[id=35, rubyBlockId=0](<selfRestore>$151: T.class_of(ControlFlow), <block-pre-call-temp>$150: Sorbet::Private::Static::Void)\l<statTemp>$148: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$150, sig>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_35" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_37" [
        label = "block[id=37, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$151: T.class_of(ControlFlow), <block-pre-call-temp>$150: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$158: Symbol(:\"a\") = :\"a\"\l<statTemp>$160: T.class_of(T) = alias <C T>\l<statTemp>$161: T.class_of(Integer) = alias <C Integer>\l<statTemp>$162: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$159: <Type: T.nilable(Integer)> = <statTemp>$160: T.class_of(T).any(<statTemp>$161: T.class_of(Integer), <statTemp>$162: T.class_of(NilClass))\l<magic>$163: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$157: {a: <Type: T.nilable(Integer)>} = <magic>$163: T.class_of(<Magic>).<build-hash>(<hashTemp>$158: Symbol(:\"a\"), <hashTemp>$159: <Type: T.nilable(Integer)>)\l<statTemp>$155: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$157: {a: <Type: T.nilable(Integer)>})\l<statTemp>$164: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$154: T::Private::Methods::DeclBuilder = <statTemp>$155: T::Private::Methods::DeclBuilder.returns(<statTemp>$164: T.class_of(Integer))\l<blockReturnTemp>$165: T.noreturn = blockreturn<sig> <blockReturnTemp>$154: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_37" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
}

}

