Read: {"jsonrpc":"2.0", "method":"initialize", "params":{"processId":52385, "rootPath":"/Users/nelhage/stripe/pay-server", "rootUri":"file:///Users/nelhage/stripe/pay-server", "capabilities":{"workspace":{"applyEdit":true, "executeCommand":{"dynamicRegistration":true}, "workspaceFolders":true}, "textDocument":{"synchronization":{"willSave":true, "didSave":true, "willSaveWaitUntil":true}, "documentSymbol":{"symbolKind":{"valueSet":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]}, "hierarchicalDocumentSymbolSupport":true}, "formatting":{"dynamicRegistration":true}, "codeAction":{"dynamicRegistration":true}}}, "initializationOptions":null}, "id":1}
Write: {"jsonrpc":"2.0","id":1,"requestMethod":"initialize","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"triggerCharacters":["."]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"typeDefinitionProvider":true,"referencesProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix"]}}}}
Read: {"jsonrpc":"2.0", "method":"initialized", "params":{}}
Read: {"jsonrpc":"2.0", "method":"textDocument/didOpen", "params":{"textDocument":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb", "languageId":"Ruby", "version":0, "text":"# typed: true\nclass TestCompletion\n  def method_a(x, y); end\n  def method_b(x); end\nend\n\nTestCompletion.new.m\n"}}}
Read: {"jsonrpc":"2.0", "method":"textDocument/completion", "params":{"textDocument":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb"}, "position":{"line":6, "character":20}}, "id":88}
Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb","diagnostics":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":20}},"severity":1,"code":7003,"message":"Method `m` does not exist on `TestCompletion`","relatedInformation":[{"location":{"uri":"https://srb.help/7003","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}}},"message":"Click for more information on this error."}]}]}}
Write: {"jsonrpc":"2.0","id":88,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"BigDecimal","kind":2,"detail":"sig {params(initial: T.any(Integer, Float, Rational, BigDecimal, String), digits: Integer, exception: T::Boolean).returns(BigDecimal)}","insertText":"BigDecimal","insertTextFormat":1},{"label":"Complex","kind":2,"detail":"sig {params(x: T.any(Numeric, String), y: T.any(Numeric, String), exception: T::Boolean).returns(Complex)}","documentation":{"kind":"plaintext","value":"Returns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n    string form = extra spaces , complex , extra spaces ;\n    complex = real part | [ sign ] , imaginary part\n            | real part , sign , imaginary part\n            | rational , \"@\" , rational ;\n    real part = rational ;\n    imaginary part = imaginary unit | unsigned rational , imaginary unit ;\n    rational = [ sign ] , unsigned rational ;\n    unsigned rational = numerator | numerator , \"/\" , denominator ;\n    numerator = integer part | fractional part | integer part , fractional part ;\n    denominator = digits ;\n    integer part = digits ;\n    fractional part = \".\" , digits , [ ( \"e\" | \"E\" ), [ sign ] , digits ] ;\n    imaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\n    sign = \"-\" | \"+\" ;\n    digits = digit , { digit | \"_\" , digit };\n    digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\n    extra spaces = ? \\s* ? ;\n\nSee\n[String\\#to\\_c](https://ruby-doc.org/core-2.6.3/String.html#method-i-to_c)\n."},"insertText":"Complex","insertTextFormat":1},{"label":"__method__","kind":2,"detail":"sig {returns(T.nilable(Symbol))}","documentation":{"kind":"plaintext","value":"Returns the name at the definition of the current method as a\n[Symbol](https://ruby-doc.org/core-2.6.3/Symbol.html). If called\noutside of a method, it returns `nil` ."},"insertText":"__method__","insertTextFormat":1},{"label":"define_singleton_method","kind":2,"detail":"sig {params(symbol: T.any(Symbol, String), method: T.any(Proc, Method, UnboundMethod)).returns(Symbol)}","insertText":"define_singleton_method","insertTextFormat":1},{"label":"define_singleton_method","kind":2,"detail":"sig {params(symbol: T.untyped, method: T.untyped, blk: T.untyped).returns(T.untyped)}","insertText":"define_singleton_method","insertTextFormat":1},{"label":"define_singleton_method","kind":2,"detail":"sig {params(symbol: T.any(Symbol, String), blk: BasicObject).returns(Symbol)}","insertText":"define_singleton_method","insertTextFormat":1},{"label":"enum_for","kind":2,"detail":"sig {params(method: Symbol, args: BasicObject).returns(T::Enumerator[T.untyped])}","insertText":"enum_for","insertTextFormat":1},{"label":"enum_for","kind":2,"detail":"sig {params(method: T.untyped, args: T.untyped, blk: T.untyped).returns(T.untyped)}","insertText":"enum_for","insertTextFormat":1},{"label":"enum_for","kind":2,"detail":"sig {params(method: Symbol, args: BasicObject, blk: BasicObject).returns(T::Enumerator[T.untyped])}","insertText":"enum_for","insertTextFormat":1},{"label":"format","kind":2,"detail":"sig {params(format: String, args: BasicObject).returns(String)}","insertText":"format","insertTextFormat":1},{"label":"lambda","kind":2,"detail":"sig {params(blk: BasicObject).returns(Proc)}","documentation":{"kind":"plaintext","value":"Equivalent to `Proc.new`, except the resulting\n[Proc](https://ruby-doc.org/core-2.6.3/Proc.html) objects check the\nnumber of parameters passed when called."},"insertText":"lambda","insertTextFormat":1},{"label":"method","kind":2,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertText":"method","insertTextFormat":1},{"label":"method_a","kind":2,"detail":"sig {params(x: T.untyped, y: T.untyped).returns(T.untyped)}","insertText":"method_a","insertTextFormat":1},{"label":"method_b","kind":2,"detail":"sig {params(x: T.untyped).returns(T.untyped)}","insertText":"method_b","insertTextFormat":1},{"label":"methods","kind":2,"detail":"sig {params(regular: T::Boolean).returns(T::Array[Symbol])}","insertText":"methods","insertTextFormat":1},{"label":"private_methods","kind":2,"detail":"sig {params(all: T::Boolean).returns(T::Array[Symbol])}","insertText":"private_methods","insertTextFormat":1},{"label":"protected_methods","kind":2,"detail":"sig {params(all: T::Boolean).returns(T::Array[Symbol])}","insertText":"protected_methods","insertTextFormat":1},{"label":"public_method","kind":2,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertText":"public_method","insertTextFormat":1},{"label":"public_methods","kind":2,"detail":"sig {params(all: T::Boolean).returns(T::Array[Symbol])}","insertText":"public_methods","insertTextFormat":1},{"label":"remove_instance_variable","kind":2,"detail":"sig {params(arg0: Symbol).returns(T.untyped)}","insertText":"remove_instance_variable","insertTextFormat":1},{"label":"singleton_method","kind":2,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertText":"singleton_method","insertTextFormat":1},{"label":"singleton_methods","kind":2,"detail":"sig {params(all: T::Boolean).returns(T::Array[Symbol])}","insertText":"singleton_methods","insertTextFormat":1},{"label":"system","kind":2,"detail":"sig {params(args: String).returns(T.nilable(T::Boolean))}","documentation":{"kind":"plaintext","value":"Executes *command…* in a subshell. *command…* is one of following forms.\n\n    commandline                 : command line string which is passed to the standard shell\n    cmdname, arg1, ...          : command name and one or more arguments (no shell)\n    [cmdname, argv0], arg1, ... : command name, argv[0] and zero or more arguments (no shell)\n\nsystem returns `true` if the command gives zero exit status, `false` for\nnon zero exit status. Returns `nil` if command execution fails. An error\nstatus is available in `$?` . The arguments are processed in the same\nway as for `Kernel.spawn` .\n\nThe hash arguments, env and options, are same as `exec` and `spawn` .\nSee `Kernel.spawn` for details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n    config.h main.rb\n    *\n\nSee `Kernel.exec` for the standard shell."},"insertText":"system","insertTextFormat":1},{"label":"to_enum","kind":2,"detail":"sig {params(method: Symbol, args: BasicObject).returns(T::Enumerator[T.untyped])}","insertText":"to_enum","insertTextFormat":1},{"label":"to_enum","kind":2,"detail":"sig {params(method: T.untyped, args: T.untyped, blk: T.untyped).returns(T.untyped)}","insertText":"to_enum","insertTextFormat":1},{"label":"to_enum","kind":2,"detail":"sig {params(method: Symbol, args: BasicObject, blk: BasicObject).returns(T::Enumerator[T.untyped])}","insertText":"to_enum","insertTextFormat":1}]}}
