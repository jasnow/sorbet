class <emptyTree><<C <root>>> < ()
  module <emptyTree>::<C MM><<C <todo sym>>> < ()
    <emptyTree>
  end

  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    class <singleton class><<C <todo sym>>> < ()
      <self>.include(<emptyTree>::<C MM>)

      def newer<<C <todo sym>>>(&<blk>)
        <self>.new()
      end
    end
  end

  class <emptyTree>::<C B><<C <todo sym>>> < (::<todo sym>)
    <self>.extend(<emptyTree>::<C MM>)

    def self.newer<<C <todo sym>>>(&<blk>)
      <self>.new()
    end
  end

  class <emptyTree>::<C C><<C <todo sym>>> < (<emptyTree>::<C A>)
    class <singleton class><<C <todo sym>>> < ()
      def newerer<<C <todo sym>>>(&<blk>)
        <self>.newer()
      end
    end
  end

  def main<<C <todo sym>>>(&<blk>)
    begin
      <self>.puts(<emptyTree>::<C A>.newer())
      <self>.puts(<emptyTree>::<C B>.newer())
      <self>.puts(<emptyTree>::<C C>.newerer())
    end
  end

  <self>.main()
end
