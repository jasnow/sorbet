class <emptyTree><<C <root>>> < ()
  class <emptyTree>::<C MyTest><<C <todo sym>>> < (::<todo sym>)
    def outside_method<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    begin
      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({}).void()
      end
      def <test_works outside><<C <todo sym>>>(&<blk>)
        <self>.outside_method()
      end
    end

    begin
      <emptyTree>::<C CONST> = ::T.unsafe(nil)
      begin
        ::T::Sig::WithoutRuntime.sig() do ||
          <self>.params({}).void()
        end
        def <test_allows constants inside of IT><<C <todo sym>>>(&<blk>)
          ::Module.const_set(:"CONST", 10)
        end
      end
    end

    begin
      <emptyTree>::<C C2> = ::T.let(::T.unsafe(nil), <emptyTree>::<C Integer>)
      begin
        ::T::Sig::WithoutRuntime.sig() do ||
          <self>.params({}).void()
        end
        def <test_allows let-ed constants inside of IT><<C <todo sym>>>(&<blk>)
          ::Module.const_set(:"C2", <emptyTree>::<C T>.let(10, <emptyTree>::<C Integer>))
        end
      end
    end

    begin
      <emptyTree>::<C C3> = <emptyTree>::<C Mod>::<C C>
      begin
        ::T::Sig::WithoutRuntime.sig() do ||
          <self>.params({}).void()
        end
        def <test_allows path constants inside of IT><<C <todo sym>>>(&<blk>)
          begin
            <emptyTree>
            <emptyTree>::<C C3>.new()
          end
        end
      end
    end

    class <emptyTree>::<C <class_some inner tests>><<C <todo sym>>> < (<self>)
      begin
        def inside_method<<C <todo sym>>>(&<blk>)
          <emptyTree>
        end
        begin
          ::T::Sig::WithoutRuntime.sig() do ||
            <self>.params({}).void()
          end
          def <test_works inside><<C <todo sym>>>(&<blk>)
            begin
              <self>.outside_method()
              <self>.inside_method()
            end
          end
        end
      end
    end

    def instance_helper<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    begin
      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({}).void()
      end
      def initialize<<C <todo sym>>>(&<blk>)
        begin
          @foo = <emptyTree>::<C T>.let(3, <emptyTree>::<C Integer>)
          <self>.instance_helper()
        end
      end
    end

    begin
      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({}).void()
      end
      def <after><<C <todo sym>>>(&<blk>)
        begin
          @foo = nil
          <self>.instance_helper()
        end
      end
    end

    begin
      ::T::Sig::WithoutRuntime.sig() do ||
        <self>.params({}).void()
      end
      def <test_can read foo><<C <todo sym>>>(&<blk>)
        begin
          <emptyTree>::<C T>.assert_type!(@foo, <emptyTree>::<C Integer>)
          <self>.instance_helper()
        end
      end
    end

    def self.random_method<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    <self>.random_method() do ||
      @random_method_ivar = <emptyTree>::<C T>.let(3, <emptyTree>::<C Integer>)
    end

    class <emptyTree>::<C <class_Object>><<C <todo sym>>> < (<self>)
      begin
        begin
          ::T::Sig::WithoutRuntime.sig() do ||
            <self>.params({}).void()
          end
          def <test_Object><<C <todo sym>>>(&<blk>)
            <emptyTree>
          end
        end
        begin
          ::T::Sig::WithoutRuntime.sig() do ||
            <self>.params({}).void()
          end
          def <test_Object><<C <todo sym>>>(&<blk>)
            <emptyTree>
          end
        end
      end
    end

    def self.it<<C <todo sym>>>(*args, &<blk>)
      <emptyTree>
    end

    <self>.it("ignores methods without a block")

    <self>.junk().it("ignores non-self calls") do ||
      <self>.junk()
    end

    class <emptyTree>::<C <class_a non-ideal situation>><<C <todo sym>>> < (<self>)
      begin
        class <emptyTree>::<C <class_nobody should write this but we should still handle it>><<C <todo sym>>> < (<self>)
          <emptyTree>
        end
        begin
          ::T::Sig::WithoutRuntime.sig() do ||
            <self>.params({}).void()
          end
          def <test_contains nested describes><<C <todo sym>>>(&<blk>)
            <emptyTree>
          end
        end
      end
    end
  end

  def junk<<C <todo sym>>>(&<blk>)
    <emptyTree>
  end

  module <emptyTree>::<C Mod><<C <todo sym>>> < ()
    class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
      <emptyTree>
    end
  end
end
